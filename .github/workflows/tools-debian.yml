name: Build nonraid-tools Debian Package

on:
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub release'
        required: false
        default: false
        type: boolean
      draft_release:
        description: 'Create release as draft (no tag)'
        required: false
        default: false
        type: boolean

jobs:
  build-artifact:
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get nmdctl version
        id: get-nmdctl
        run: |
          # Get the version from the nmdctl binary
          VERSION=$(grep VERSION= tools/nmdctl | cut -d= -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Get Next Build Number
        id: get-build
        run: |
          NEXT_BUILD=$(git tag -l "nonraid-tools-${{ steps.get-nmdctl.outputs.version }}-*" | wc -l)
          NEXT_BUILD=$((NEXT_BUILD + 1))
          echo "build=$NEXT_BUILD" >> $GITHUB_OUTPUT

      - name: Install Debian Package Building Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y debhelper build-essential devscripts

      - name: Create Debian Package
        run: |
          cd tools
          echo "::group::Prepare Debian Package"
          cat > debian/changelog << EOF
          nonraid-tools (${{ steps.get-nmdctl.outputs.version }}-${{ steps.get-build.outputs.build }}) noble; urgency=medium

            * NonRAID tools Debian Package

           -- Matti Hiljanen <matti@hiljanen.com>  $(date -R)
          EOF

          cp systemd/nonraid.service debian/nonraid-tools.nonraid.service
          cp systemd/nonraid.default debian/nonraid-tools.nonraid.default
          echo "::endgroup::"

          echo "::group::Build Debian Binary Package"
          dpkg-buildpackage -b -rfakeroot -us -uc
          echo "::endgroup::"

      - name: Upload Debian Package as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: nonraid-tools-${{ steps.get-nmdctl.outputs.version }}-${{ steps.get-build.outputs.build }}
          path: "*.deb"
          retention-days: 30

      - name: Get Commits Since Last Release
        id: get-commits
        if: ${{ github.event.inputs.create_release == 'true' }}
        run: |
          LAST_TOOLS_TAG=$(git tag -l "nonraid-tools-*" --sort=-committerdate | head -n1 || echo "none")
          if [ "$LAST_TOOLS_TAG" = "none" ]; then
            # If no nonraid-tools tags exist, get all commits
            COMMITS=$(git log --pretty=format:"- %s (%h)" -- tools/ README.md)
          else
            # Get commits since the last nonraid-tools tag
            COMMITS=$(git log ${LAST_TOOLS_TAG}..HEAD --pretty=format:"- %s (%h)" -- tools/ README.md)
          fi
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Publish to PPA
        if: ${{ github.event.inputs.create_release == 'true' }}
        env:
          PPA_GPG_KEY: ${{ secrets.PPA_GPG_KEY }}
          PPA_GPG_PASSPHRASE: ${{ secrets.PPA_GPG_PASSPHRASE }}
        run: |
          cd tools
          echo "::group::Build Debian Source Package"
          git archive --format=tar.gz --prefix="nonraid-tools-${{ steps.get-nmdctl.outputs.version }}/" HEAD > "../nonraid-tools_${{ steps.get-nmdctl.outputs.version }}.orig.tar.gz" nmdctl systemd
          gpg --batch --passphrase-file <(cat <<<"${PPA_GPG_PASSPHRASE}") --import <(cat <<<"${PPA_GPG_KEY}")
          KEY_ID=$(gpg --list-secret-keys --with-colons | grep '^sec:' | cut -d: -f5 | head -1)
          debuild -S -i -sa -k"$KEY_ID" -p"gpg --batch --passphrase "$PPA_GPG_PASSPHRASE" --pinentry-mode loopback"
          echo "::endgroup::"

          echo "::group::Publish to PPA"
          cat > ~/.dput.cf << EOF
          [ppa]
          fqdn = ppa.launchpad.net
          method = ftp
          incoming = ~%(ppa)s/ubuntu/
          login = anonymous
          allow_unsigned_uploads = 0
          EOF

          dput ppa:qvr/nonraid ../nonraid-tools_${{ steps.get-nmdctl.outputs.version }}-${{ steps.get-build.outputs.build }}_source.changes
          echo "::endgroup::"

      - name: Create Release
        if: ${{ github.event.inputs.create_release == 'true' }}
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.draft_release != 'true' && format('nonraid-tools-{0}-{1}', steps.get-nmdctl.outputs.version, steps.get-build.outputs.build) || '' }}
          name: NonRAID Tools Debian Package - Version ${{ steps.get-nmdctl.outputs.version }} Build ${{ steps.get-build.outputs.build }}
          draft: ${{ github.event.inputs.draft_release }}
          body: |
            **NonRAID Tools Package - Version ${{ steps.get-nmdctl.outputs.version }} Build ${{ steps.get-build.outputs.build }}**

            This release contains the NonRAID array management tools package for Ubuntu/Debian systems.
            ${{ github.event.inputs.draft_release == 'true' && format('
            > ⚠️ **DRAFT RELEASE** - This is a draft release without an associated Git tag. Finalize this release before tagging as:
            > `nonraid-tools-{0}-{1}`', steps.get-nmdctl.outputs.version, steps.get-build.outputs.build) || '' }}

            ## What's Included
            - `/usr/bin/nmdctl`
            - `nonraid.service` systemd unit file

            ## Changes Since Last Release
            ${{ steps.get-commits.outputs.commits }}

            ## Installation
            ```bash
            sudo apt install ./nonraid-tools_*.deb
            ```

            ## Usage
            After installation, `nmdctl` command is available:
            ```bash
            sudo nmdctl --help
            ```

            ## Important Notes
            - ⚠️ **Experimental software** - Use at your own risk
            - See [README.md](https://github.com/${{ github.repository }}/blob/main/README.md) for more `nmdctl` command examples
            - Always backup important data before use
          files: |
            *.deb
